package com.moe.fo.contract;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int16;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class FoodOriginContract extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506111f8806100616000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063137273131461007d57806334ecaff6146101065780636f77926b146101ee5780637ed8a719146102b7578063b6010fcd14610359578063d9f3ea0b1461043b575b600080fd5b610104600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560010b9060200190929190505050610596565b005b6101ec600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506106d0565b005b3480156101fa57600080fd5b5061022f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a5a565b60405180806020018360010b60010b8152602001828103825284818151815260200191508051906020019080838360005b8381101561027b578082015181840152602081019050610260565b50505050905090810190601f1680156102a85780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b610357600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b93565b005b34801561036557600080fd5b506103c0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610c9d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104005780820151818401526020810190506103e5565b50505050905090810190601f16801561042d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561044757600080fd5b506104e8600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610dad565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561055a57808201518184015260208101905061053f565b50505050905090810190601f1680156105875780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b826000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061066b929190611127565b50806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548161ffff021916908360010b61ffff160217905550505050565b606080846040516020018082805190602001908083835b60208310151561070c57805182526020820191506020810190506020830392506106e7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040529150816040516020018082805190602001908083835b60208310151561077b5780518252602082019150602081019050602083039250610756565b6001836020036101000a038019825116818451168082178552505050505050905001807f2d00000000000000000000000000000000000000000000000000000000000000815250600101915050604051602081830303815290604052915081846040516020018083805190602001908083835b60208310151561081357805182526020820191506020810190506020830392506107ee565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156108665780518252602082019150602081019050602083039250610841565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150819050336002826040518082805190602001908083835b6020831015156108d957805182526020820191506020810190506020830392506108b4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836002826040518082805190602001908083835b6020831015156109865780518252602082019150602081019050602083039250610961565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010190805190602001906109cf929190611127565b50826002826040518082805190602001908083835b602083101515610a0957805182526020820191506020810190506020830392506109e4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002019080519060200190610a52929190611127565b505050505050565b606060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460010b818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b835780601f10610b5857610100808354040283529160200191610b83565b820191906000526020600020905b815481529060010190602001808311610b6657829003601f168201915b5050505050915091509150915091565b816001836040518082805190602001908083835b602083101515610bcc5780518252602082019150602081019050602083039250610ba7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000019080519060200190610c15929190611127565b50806001836040518082805190602001908083835b602083101515610c4f5780518252602082019150602081019050602083039250610c2a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190610c98929190611127565b505050565b60606001826040518082805190602001908083835b602083101515610cd75780518252602082019150602081019050602083039250610cb2565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b50505050509050919050565b60006060806060856040516020018082805190602001908083835b602083101515610ded5780518252602082019150602081019050602083039250610dc8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040529150816040516020018082805190602001908083835b602083101515610e5c5780518252602082019150602081019050602083039250610e37565b6001836020036101000a038019825116818451168082178552505050505050905001807f2d00000000000000000000000000000000000000000000000000000000000000815250600101915050604051602081830303815290604052915081856040516020018083805190602001908083835b602083101515610ef45780518252602082019150602081019050602083039250610ecf565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515610f475780518252602082019150602081019050602083039250610f22565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291508190506002816040518082805190602001908083835b602083101515610fb95780518252602082019150602081019050602083039250610f94565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002826040518082805190602001908083835b6020831015156110485780518252602082019150602081019050602083039250611023565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600201808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111135780601f106110e857610100808354040283529160200191611113565b820191906000526020600020905b8154815290600101906020018083116110f657829003601f168201915b505050505090509350935050509250929050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061116857805160ff1916838001178555611196565b82800160010185558215611196579182015b8281111561119557825182559160200191906001019061117a565b5b5090506111a391906111a7565b5090565b6111c991905b808211156111c55760008160009055506001016111ad565b5090565b905600a165627a7a72305820ea23f0b98b13701e30832f062fe3813619905cc95d7cd98675a6f6081459a66f0029";

    protected FoodOriginContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected FoodOriginContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static FoodOriginContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FoodOriginContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static FoodOriginContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FoodOriginContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RemoteCall<FoodOriginContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.asList());
        return deployRemoteCall(FoodOriginContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<FoodOriginContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.asList());
        return deployRemoteCall(FoodOriginContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<List<Type>> getUser(String address) {
        Function function = new Function(
                "getUser",
                Collections.singletonList(new Address(address)),
                Arrays.asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Int16>() {
                })
        );
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> setUser(String address, String name, int roleId) {
        Function function = new Function(
                "setUser",
                Arrays.asList(new Address(address), new Utf8String(name), new Int16(roleId)),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List<Type>> getItem(String itemId) {
        Function function = new Function(
                "getItem",
                Collections.singletonList(new Utf8String(itemId)),
                Collections.singletonList(new TypeReference<Utf8String>() {
                })
        );
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addItem(String itemId, String itemName) {
        Function function = new Function(
                "addItem",
                Arrays.asList(new Utf8String(itemId), new Utf8String(itemName)),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }


    public RemoteCall<List<Type>> getOps(String itemId, String action) {
        Function function = new Function(
                "getOps",
                Arrays.asList(new Utf8String(itemId), new Utf8String(action)),
                Arrays.asList(new TypeReference<Address>() {
                }, new TypeReference<Utf8String>() {
                })
        );
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addOp(String itemId, String action, String data) {
        Function function = new Function(
                "addOp",
                Arrays.asList(new Utf8String(itemId), new Utf8String(action), new Utf8String(data)),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }
}
